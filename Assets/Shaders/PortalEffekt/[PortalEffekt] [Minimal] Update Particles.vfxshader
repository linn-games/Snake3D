//[PortalEffekt] [Minimal] Update Particles,1
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 glcore gles3 metal vulkan xboxone xboxone xboxseries playstation ps5 switch webgpu


#pragma enable_d3d11_debug_symbols
#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_MASS_CURRENT 1
#define VFX_USE_COLOR_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define RAW_CAPACITY 300u
#define VFX_LOCAL_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_FIXED_SIZE 320
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1


struct GraphValues
{
    bool _vfx_enabled_c;
    float3 Sphere_center_a;
    float Sphere_radius_a;
    float attractionSpeed_a;
    float attractionForce_a;
    float stickDistance_a;
    float stickForce_a;
    float deltaTime_a;
    bool _vfx_enabled_d;
    float3 _Color_a;
    bool _vfx_enabled_e;
    bool _vfx_enabled_f;
    bool _vfx_enabled_g;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    float3 position;
    float lifetime;
    float3 velocity;
    float mass;
    float3 color;
    bool alive;
    float age;
};

struct VFXSourceAttributes
{
};



#define IndirectOutputType uint





















#ifdef VFX_IS_RAYTRACED
#pragma multi_compile _ VFX_COMPUTE_AABBS
#endif

#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if VFX_HAS_INDIRECT_DRAW
RWStructuredBuffer<uint> indirectBuffer;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#if VFX_USE_STRIPALIVE_CURRENT
StructuredBuffer<uint> attachedStripDataBuffer;
#endif

CBUFFER_START(updateParamsConst)
    uint dispatchWidth;
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
    float3 cameraXRSettings;
CBUFFER_END

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"


#if VFX_HAS_INDIRECT_DRAW
void AppendOutputBuffer(RWStructuredBuffer<IndirectOutputType> outputBuffer, IndirectOutputType output, uint instanceActiveIndex, uint increment = 1)
{
    uint indirectIndex;

#if VFX_FEATURE_SORT
    InterlockedAdd(outputBuffer[instanceActiveIndex].index, increment, indirectIndex);
#else
    InterlockedAdd(outputBuffer[instanceActiveIndex], increment, indirectIndex);
#endif
    indirectIndex /= increment;
    indirectIndex += instancingBatchSize + instanceActiveIndex * RAW_CAPACITY;
    outputBuffer[indirectIndex] = output;
}

#endif

void ConformToSphere(inout float3 velocity, float3 position, float mass, float3 Sphere_center, float Sphere_radius, float attractionSpeed, float attractionForce, float stickDistance, float stickForce, float deltaTime)
{
    
    float3 dir = Sphere_center - position;
    float distToCenter = length(dir);
    float distToSurface = distToCenter - Sphere_radius;
    dir /= max(VFX_FLT_MIN,distToCenter); // safe normalize
    float spdNormal = dot(dir,velocity);
    float ratio = smoothstep(0.0,stickDistance * 2.0,abs(distToSurface));
    float tgtSpeed = sign(distToSurface) * attractionSpeed * ratio;
    float deltaSpeed = tgtSpeed - spdNormal;
    velocity += sign(deltaSpeed) * min(abs(deltaSpeed),deltaTime * lerp(stickForce,attractionForce,ratio)) * dir / mass;
}
void SetAttribute_FDD06EC7(inout float3 color, float3 _Color) /*channels:XYZ */
{
    color = _Color;
}
void EulerIntegration(inout float3 position, float3 velocity, float deltaTime)
{
    position += velocity * deltaTime;
}
void Age(inout float age, float deltaTime)
{
    age += deltaTime;
}
void Reap(float age, float lifetime, inout bool alive)
{
    if(age > lifetime) { alive = false; }
}




[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);

	uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
	#if defined(VFX_INSTANCING_FIXED_SIZE)
		uint index = GetThreadId(groupId, 0, dispatchWidth);
		index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
		index += groupThreadId.x;
	#else
		uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
	#endif
	
	

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 272);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	
	uint systemSeed = contextData.systemSeed;
	uint nbMax = contextData.maxParticleCount;

#if VFX_COMPUTE_BOUNDS
	uint tid = groupThreadId.x;
#endif

	if (index < nbMax)
	{
#if HAS_STRIPS
		if (index == 0)
		{
			STRIP_PARTICLE_COUNTER(instanceIndex) = 0;
		}
#endif

		GraphValues graphValues;
		
		graphValues.Sphere_center_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 272  + 144));
		graphValues._Color_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 272  + 160));
		graphValues._vfx_enabled_c = (bool)graphValuesBuffer.Load(instanceActiveIndex * 272  + 216);
		graphValues.Sphere_radius_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 220));
		graphValues.attractionSpeed_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 224));
		graphValues.attractionForce_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 228));
		graphValues.stickDistance_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 232));
		graphValues.stickForce_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 236));
		graphValues.deltaTime_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 272  + 240));
		graphValues._vfx_enabled_d = (bool)graphValuesBuffer.Load(instanceActiveIndex * 272  + 244);
		graphValues._vfx_enabled_e = (bool)graphValuesBuffer.Load(instanceActiveIndex * 272  + 248);
		graphValues._vfx_enabled_f = (bool)graphValuesBuffer.Load(instanceActiveIndex * 272  + 252);
		graphValues._vfx_enabled_g = (bool)graphValuesBuffer.Load(instanceActiveIndex * 272  + 256);
		

		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

#if VFX_USE_ALIVE_CURRENT
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x4 + 0x0)) << 2));
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x1 + 0x8C0)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x3 + 0x500)) << 2));
		attributes.mass = (float)1;
		attributes.color = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x3 + 0xA00)) << 2));
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x4 + 0x3)) << 2));
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x1 + 0xDC0)) << 2));
		
		if (attributes.alive)
		{
#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
			attributes.oldVelocity = attributes.velocity;
#endif
#if HAS_STRIPS
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
			
			
			if (deltaTime != 0.0f)
#endif
			{
				if (graphValues._vfx_enabled_c)
				{
				    ConformToSphere( /*inout */attributes.velocity, attributes.position, attributes.mass, graphValues.Sphere_center_a, graphValues.Sphere_radius_a, graphValues.attractionSpeed_a, graphValues.attractionForce_a, graphValues.stickDistance_a, graphValues.stickForce_a, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_d)
				{
				    SetAttribute_FDD06EC7( /*inout */attributes.color, graphValues._Color_a);
				}
				if (graphValues._vfx_enabled_e)
				{
				    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_f)
				{
				    Age( /*inout */attributes.age, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_g)
				{
				    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
				}
				
			}

			attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x4 + 0x0)) << 2,asuint(attributes.position));
			attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x3 + 0x500)) << 2,asuint(attributes.velocity));
			attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x3 + 0xA00)) << 2,asuint(attributes.color));
			attributeBuffer.Store(((instanceIndex * 0xF00) + (index * 0x1 + 0xDC0)) << 2,asuint(attributes.age));
						if (attributes.alive)
			{

#if VFX_HAS_INDIRECT_DRAW
                AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif

#if HAS_STRIPS
				uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripData.stripIndex);
				uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
				InterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE, bufferIndex), relativeIndexInStrip);
				InterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE, bufferIndex), relativeIndexInStrip);
#endif
			}
			else
			{
				attributeBuffer.Store(((instanceIndex * 0xF00) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
				#if USE_DEAD_LIST && !VFX_USE_STRIPALIVE_CURRENT
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
#endif
			}
		}
#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT
        else if (attributes.stripAlive)
        {
            uint bufferIndex = ((instanceIndex * ATTACHED_STRIP_COUNT) + index);
            if (index >= ATTACHED_STRIP_COUNT || STRIP_DATA_X(attachedStripDataBuffer, STRIP_MIN_ALIVE, bufferIndex) == ~1) // Attached strip is no longer alive, recycle the particle
            {
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
                attributes.stripAlive = false;
                            }
        }
#endif

// For strips, we still need to render some dead particles if they are in the middle of the strip
#if HAS_STRIPS && VFX_HAS_INDIRECT_DRAW
		if (!attributes.alive)
		{
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
			if (relativeIndexInStrip > 0 && relativeIndexInStrip + 1 < stripData.nextIndex)
			{
				AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
			}
		}
#endif

#else
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x4 + 0x0)) << 2));
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x1 + 0x8C0)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x3 + 0x500)) << 2));
		attributes.mass = (float)1;
		attributes.color = asfloat(attributeBuffer.Load3(((instanceIndex * 0xF00) + (index * 0x3 + 0xA00)) << 2));
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x4 + 0x3)) << 2));
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0xF00) + (index * 0x1 + 0xDC0)) << 2));
		
#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
		attributes.oldVelocity = attributes.velocity;
#endif
#if VFX_USE_CONTINUOUSCOLLISIONCOUNT_CURRENT
		//attributes.continuousCollisionCount = 0;
#endif
#if HAS_STRIPS
        const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
        InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
		
		
		if (deltaTime != 0.0f)
#endif
		{
			if (graphValues._vfx_enabled_c)
			{
			    ConformToSphere( /*inout */attributes.velocity, attributes.position, attributes.mass, graphValues.Sphere_center_a, graphValues.Sphere_radius_a, graphValues.attractionSpeed_a, graphValues.attractionForce_a, graphValues.stickDistance_a, graphValues.stickForce_a, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_d)
			{
			    SetAttribute_FDD06EC7( /*inout */attributes.color, graphValues._Color_a);
			}
			if (graphValues._vfx_enabled_e)
			{
			    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_f)
			{
			    Age( /*inout */attributes.age, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_g)
			{
			    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
			}
			
		}
		attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x4 + 0x0)) << 2,asuint(attributes.position));
		attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x3 + 0x500)) << 2,asuint(attributes.velocity));
		attributeBuffer.Store3(((instanceIndex * 0xF00) + (index * 0x3 + 0xA00)) << 2,asuint(attributes.color));
		attributeBuffer.Store(((instanceIndex * 0xF00) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
		attributeBuffer.Store(((instanceIndex * 0xF00) + (index * 0x1 + 0xDC0)) << 2,asuint(attributes.age));
		
#if VFX_HAS_INDIRECT_DRAW
        AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif
#endif
#if VFX_COMPUTE_BOUNDS || VFX_COMPUTE_AABBS
    {
    #if VFX_COMPUTE_BOUNDS
        float3 size3 = float3(attributes.size,attributes.size,attributes.size);
        #if VFX_USE_SCALEX_CURRENT
        size3.x *= attributes.scaleX;
        #endif
        #if VFX_USE_SCALEY_CURRENT
        size3.y *= attributes.scaleY;
        #endif
        #if VFX_USE_SCALEZ_CURRENT
        size3.z *= attributes.scaleZ;
        #endif
        
        #if VFX_WORLD_SPACE
            
            
        #else
            float4x4 worldToLocal = (float4x4)0;
        #endif
		InitReduction(attributes, size3, tid, worldToLocal);
    #endif
    }
    #if VFX_COMPUTE_AABBS
            float3 size3 = float3(attributes.size,attributes.size,attributes.size);
            float3 rtScale = float3(1,1,1);
            #if VFX_USE_RT_CUSTOM_SCALE
                
                
                rtScale = float3(rayTracedScaling, 1.0f);
            #else
                #ifdef VFX_RT_DEFAULT_SCALE
                    rtScale = VFX_RT_DEFAULT_SCALE;
                #endif
            #endif
            
            size3 *= rtScale;
            #if VFX_USE_SCALEX_CURRENT
            size3.x *= attributes.scaleX;
            #endif
            #if VFX_USE_SCALEY_CURRENT
            size3.y *= attributes.scaleY;
            #endif
            #if VFX_USE_SCALEZ_CURRENT
            size3.z *= attributes.scaleZ;
            #endif
            
            int rayTracingDecimationFactor = VFX_RT_DECIMATION_FACTOR;
            FillAabbBuffer(attributes, size3, index, instanceIndex, rayTracingDecimationFactor);
    #endif
#endif
	}
	#if VFX_COMPUTE_BOUNDS
	PerformBoundsReduction(index, tid, instanceIndex, nbMax);
	#endif
}
