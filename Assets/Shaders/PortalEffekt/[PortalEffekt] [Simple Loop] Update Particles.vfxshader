//[PortalEffekt] [Simple Loop] Update Particles,4
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 glcore gles3 metal vulkan xboxone xboxone xboxseries playstation ps5 switch webgpu


#pragma enable_d3d11_debug_symbols
#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_MASS_CURRENT 1
#define VFX_USE_SIZE_CURRENT 1
#define VFX_USE_SCALEX_CURRENT 1
#define VFX_USE_SCALEY_CURRENT 1
#define VFX_USE_PARTICLEID_CURRENT 1
#define VFX_USE_TARGETPOSITION_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define RAW_CAPACITY 300u
#define VFX_WORLD_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_FIXED_SIZE 320
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1


struct GraphValues
{
    bool _vfx_enabled_d;
    float3 Force_a;
    float deltaTime_a;
    bool _vfx_enabled_e;
    float dragCoefficient_a;
    bool _vfx_enabled_f;
    float3 uniform_b;
    uint uniform_c;
    uint uniform_d;
    float uniform_e;
    float3 uniform_f;
    float3 uniform_g;
    float3 uniform_h;
    bool _vfx_enabled_g;
    bool _vfx_enabled_h;
    bool _vfx_enabled_i;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    float lifetime;
    float3 position;
    float3 velocity;
    float mass;
    float size;
    float scaleX;
    float scaleY;
    uint particleId;
    float3 targetPosition;
    bool alive;
    float age;
};

struct VFXSourceAttributes
{
};



#define IndirectOutputType uint





















#ifdef VFX_IS_RAYTRACED
#pragma multi_compile _ VFX_COMPUTE_AABBS
#endif

#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if VFX_HAS_INDIRECT_DRAW
RWStructuredBuffer<uint> indirectBuffer;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#if VFX_USE_STRIPALIVE_CURRENT
StructuredBuffer<uint> attachedStripDataBuffer;
#endif

CBUFFER_START(updateParamsConst)
    uint dispatchWidth;
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
    float3 cameraXRSettings;
CBUFFER_END

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"


#if VFX_HAS_INDIRECT_DRAW
void AppendOutputBuffer(RWStructuredBuffer<IndirectOutputType> outputBuffer, IndirectOutputType output, uint instanceActiveIndex, uint increment = 1)
{
    uint indirectIndex;

#if VFX_FEATURE_SORT
    InterlockedAdd(outputBuffer[instanceActiveIndex].index, increment, indirectIndex);
#else
    InterlockedAdd(outputBuffer[instanceActiveIndex], increment, indirectIndex);
#endif
    indirectIndex /= increment;
    indirectIndex += instancingBatchSize + instanceActiveIndex * RAW_CAPACITY;
    outputBuffer[indirectIndex] = output;
}

#endif

void Gravity(inout float3 velocity, float3 Force, float deltaTime)
{
    velocity += Force * deltaTime;
}
void Drag_1(inout float3 velocity, float mass, float size, float scaleX, float scaleY, float dragCoefficient, float deltaTime) /*UseParticleSize:True */
{
    
    float2 side = size * float2(scaleX, scaleY);
    dragCoefficient *= side.x * side.y;
    velocity *= exp(-(dragCoefficient * deltaTime) / mass);
}
void PositionSequential_53857DD9(uint particleId, inout float3 targetPosition, float3 computedTargetPosition) /*index:ParticleID writePosition:False writeTargetPosition:True mode:Wrap */
{
    
    targetPosition += computedTargetPosition;
}
void EulerIntegration(inout float3 position, float3 velocity, float deltaTime)
{
    position += velocity * deltaTime;
}
void Age(inout float age, float deltaTime)
{
    age += deltaTime;
}
void Reap(float age, float lifetime, inout bool alive)
{
    if(age > lifetime) { alive = false; }
}




[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);

	uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
	#if defined(VFX_INSTANCING_FIXED_SIZE)
		uint index = GetThreadId(groupId, 0, dispatchWidth);
		index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
		index += groupThreadId.x;
	#else
		uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
	#endif
	
	

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 352);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	
	uint systemSeed = contextData.systemSeed;
	uint nbMax = contextData.maxParticleCount;

#if VFX_COMPUTE_BOUNDS
	uint tid = groupThreadId.x;
#endif

	if (index < nbMax)
	{
#if HAS_STRIPS
		if (index == 0)
		{
			STRIP_PARTICLE_COUNTER(instanceIndex) = 0;
		}
#endif

		GraphValues graphValues;
		
		graphValues.Force_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 176));
		graphValues.uniform_b = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 192));
		graphValues.uniform_f = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 208));
		graphValues.uniform_g = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 224));
		graphValues.uniform_h = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 240));
		graphValues._vfx_enabled_d = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 284);
		graphValues.deltaTime_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 288));
		graphValues._vfx_enabled_e = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 292);
		graphValues.dragCoefficient_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 296));
		graphValues._vfx_enabled_f = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 300);
		graphValues.uniform_c = graphValuesBuffer.Load(instanceActiveIndex * 352  + 304);
		graphValues.uniform_d = graphValuesBuffer.Load(instanceActiveIndex * 352  + 308);
		graphValues.uniform_e = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 312));
		graphValues._vfx_enabled_g = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 316);
		graphValues._vfx_enabled_h = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 320);
		graphValues._vfx_enabled_i = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 324);
		

		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

#if VFX_USE_ALIVE_CURRENT
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0x0)) << 2));
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x4 + 0x140)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x3 + 0x780)) << 2));
		attributes.mass = (float)1;
		attributes.size = (float)0.100000001;
		attributes.scaleX = (float)1;
		attributes.scaleY = (float)1;
		attributes.particleId = (attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0xF00)) << 2));
		attributes.targetPosition = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x3 + 0xB40)) << 2));
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x4 + 0x143)) << 2));
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0x640)) << 2));
		
		if (attributes.alive)
		{
#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
			attributes.oldVelocity = attributes.velocity;
#endif
#if HAS_STRIPS
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
			
			
			if (deltaTime != 0.0f)
#endif
			{
				if (graphValues._vfx_enabled_d)
				{
				    Gravity( /*inout */attributes.velocity, graphValues.Force_a, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_e)
				{
				    Drag_1( /*inout */attributes.velocity, attributes.mass, attributes.size, attributes.scaleX, attributes.scaleY, graphValues.dragCoefficient_a, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_f)
				{
				    uint tmp_bp = attributes.particleId + graphValues.uniform_c;
				    uint tmp_bq = tmp_bp / graphValues.uniform_d;
				    uint tmp_br = tmp_bq * graphValues.uniform_d;
				    uint tmp_bs = tmp_bp - tmp_br;
				    float tmp_bt = (float)tmp_bs;
				    float tmp_bu = tmp_bt / graphValues.uniform_e;
				    float tmp_bw = tmp_bu * (float)6.28318548;
				    float tmp_bx = cos(tmp_bw);
				    float3 tmp_by = float3(tmp_bx, tmp_bx, tmp_bx);
				    float3 tmp_bz = tmp_by * graphValues.uniform_f;
				    float tmp_ca = sin(tmp_bw);
				    float3 tmp_cb = float3(tmp_ca, tmp_ca, tmp_ca);
				    float3 tmp_cc = tmp_cb * graphValues.uniform_g;
				    float3 tmp_cd = tmp_bz + tmp_cc;
				    float3 tmp_ce = tmp_cd * graphValues.uniform_h;
				    float3 tmp_cf = graphValues.uniform_b + tmp_ce;
				    PositionSequential_53857DD9(attributes.particleId,  /*inout */attributes.targetPosition, tmp_cf);
				}
				if (graphValues._vfx_enabled_g)
				{
				    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_h)
				{
				    Age( /*inout */attributes.age, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_i)
				{
				    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
				}
				
			}

			attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x4 + 0x140)) << 2,asuint(attributes.position));
			attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0x780)) << 2,asuint(attributes.velocity));
			attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0xB40)) << 2,asuint(attributes.targetPosition));
			attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x1 + 0x640)) << 2,asuint(attributes.age));
						if (attributes.alive)
			{

#if VFX_HAS_INDIRECT_DRAW
                AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif

#if HAS_STRIPS
				uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripData.stripIndex);
				uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
				InterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE, bufferIndex), relativeIndexInStrip);
				InterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE, bufferIndex), relativeIndexInStrip);
#endif
			}
			else
			{
				attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x4 + 0x143)) << 2,uint(attributes.alive));
				#if USE_DEAD_LIST && !VFX_USE_STRIPALIVE_CURRENT
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
#endif
			}
		}
#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT
        else if (attributes.stripAlive)
        {
            uint bufferIndex = ((instanceIndex * ATTACHED_STRIP_COUNT) + index);
            if (index >= ATTACHED_STRIP_COUNT || STRIP_DATA_X(attachedStripDataBuffer, STRIP_MIN_ALIVE, bufferIndex) == ~1) // Attached strip is no longer alive, recycle the particle
            {
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
                attributes.stripAlive = false;
                            }
        }
#endif

// For strips, we still need to render some dead particles if they are in the middle of the strip
#if HAS_STRIPS && VFX_HAS_INDIRECT_DRAW
		if (!attributes.alive)
		{
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
			if (relativeIndexInStrip > 0 && relativeIndexInStrip + 1 < stripData.nextIndex)
			{
				AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
			}
		}
#endif

#else
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0x0)) << 2));
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x4 + 0x140)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x3 + 0x780)) << 2));
		attributes.mass = (float)1;
		attributes.size = (float)0.100000001;
		attributes.scaleX = (float)1;
		attributes.scaleY = (float)1;
		attributes.particleId = (attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0xF00)) << 2));
		attributes.targetPosition = asfloat(attributeBuffer.Load3(((instanceIndex * 0x1040) + (index * 0x3 + 0xB40)) << 2));
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x4 + 0x143)) << 2));
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x1040) + (index * 0x1 + 0x640)) << 2));
		
#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
		attributes.oldVelocity = attributes.velocity;
#endif
#if VFX_USE_CONTINUOUSCOLLISIONCOUNT_CURRENT
		//attributes.continuousCollisionCount = 0;
#endif
#if HAS_STRIPS
        const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
        InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
		
		
		if (deltaTime != 0.0f)
#endif
		{
			if (graphValues._vfx_enabled_d)
			{
			    Gravity( /*inout */attributes.velocity, graphValues.Force_a, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_e)
			{
			    Drag_1( /*inout */attributes.velocity, attributes.mass, attributes.size, attributes.scaleX, attributes.scaleY, graphValues.dragCoefficient_a, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_f)
			{
			    uint tmp_bp = attributes.particleId + graphValues.uniform_c;
			    uint tmp_bq = tmp_bp / graphValues.uniform_d;
			    uint tmp_br = tmp_bq * graphValues.uniform_d;
			    uint tmp_bs = tmp_bp - tmp_br;
			    float tmp_bt = (float)tmp_bs;
			    float tmp_bu = tmp_bt / graphValues.uniform_e;
			    float tmp_bw = tmp_bu * (float)6.28318548;
			    float tmp_bx = cos(tmp_bw);
			    float3 tmp_by = float3(tmp_bx, tmp_bx, tmp_bx);
			    float3 tmp_bz = tmp_by * graphValues.uniform_f;
			    float tmp_ca = sin(tmp_bw);
			    float3 tmp_cb = float3(tmp_ca, tmp_ca, tmp_ca);
			    float3 tmp_cc = tmp_cb * graphValues.uniform_g;
			    float3 tmp_cd = tmp_bz + tmp_cc;
			    float3 tmp_ce = tmp_cd * graphValues.uniform_h;
			    float3 tmp_cf = graphValues.uniform_b + tmp_ce;
			    PositionSequential_53857DD9(attributes.particleId,  /*inout */attributes.targetPosition, tmp_cf);
			}
			if (graphValues._vfx_enabled_g)
			{
			    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_h)
			{
			    Age( /*inout */attributes.age, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_i)
			{
			    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
			}
			
		}
		attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x4 + 0x140)) << 2,asuint(attributes.position));
		attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0x780)) << 2,asuint(attributes.velocity));
		attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0xB40)) << 2,asuint(attributes.targetPosition));
		attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x4 + 0x143)) << 2,uint(attributes.alive));
		attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x1 + 0x640)) << 2,asuint(attributes.age));
		
#if VFX_HAS_INDIRECT_DRAW
        AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif
#endif
#if VFX_COMPUTE_BOUNDS || VFX_COMPUTE_AABBS
    {
    #if VFX_COMPUTE_BOUNDS
        float3 size3 = float3(attributes.size,attributes.size,attributes.size);
        #if VFX_USE_SCALEX_CURRENT
        size3.x *= attributes.scaleX;
        #endif
        #if VFX_USE_SCALEY_CURRENT
        size3.y *= attributes.scaleY;
        #endif
        #if VFX_USE_SCALEZ_CURRENT
        size3.z *= attributes.scaleZ;
        #endif
        
        #if VFX_WORLD_SPACE
            
            
        #else
            float4x4 worldToLocal = (float4x4)0;
        #endif
		InitReduction(attributes, size3, tid, worldToLocal);
    #endif
    }
    #if VFX_COMPUTE_AABBS
            float3 size3 = float3(attributes.size,attributes.size,attributes.size);
            float3 rtScale = float3(1,1,1);
            #if VFX_USE_RT_CUSTOM_SCALE
                
                
                rtScale = float3(rayTracedScaling, 1.0f);
            #else
                #ifdef VFX_RT_DEFAULT_SCALE
                    rtScale = VFX_RT_DEFAULT_SCALE;
                #endif
            #endif
            
            size3 *= rtScale;
            #if VFX_USE_SCALEX_CURRENT
            size3.x *= attributes.scaleX;
            #endif
            #if VFX_USE_SCALEY_CURRENT
            size3.y *= attributes.scaleY;
            #endif
            #if VFX_USE_SCALEZ_CURRENT
            size3.z *= attributes.scaleZ;
            #endif
            
            int rayTracingDecimationFactor = VFX_RT_DECIMATION_FACTOR;
            FillAabbBuffer(attributes, size3, index, instanceIndex, rayTracingDecimationFactor);
    #endif
#endif
	}
	#if VFX_COMPUTE_BOUNDS
	PerformBoundsReduction(index, tid, instanceIndex, nbMax);
	#endif
}
