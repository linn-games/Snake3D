//[PortalEffekt] [Simple Loop] Initialize Particles,3
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 glcore gles3 metal vulkan xboxone xboxone xboxseries playstation ps5 switch webgpu


#pragma enable_d3d11_debug_symbols
#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_SEED_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_DIRECTION_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_PARTICLEID_CURRENT 1
#define VFX_USE_TARGETPOSITION_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define RAW_CAPACITY 300u
#define VFX_STATIC_SOURCE_COUNT (1)
#define VFX_WORLD_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.universal/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_VARIABLE_SIZE 1
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1


struct GraphValues
{
    bool _vfx_enabled_a;
    float A_a;
    float B_a;
    bool _vfx_enabled_b;
    float rNorm_a;
    float uniform_a;
    float4x4 transform_a;
    float4x4 inverseTranspose_a;
    bool _vfx_enabled_c;
    float3 Direction_a;
    float MinSpeed_a;
    float MaxSpeed_a;
    float DirectionBlend_a;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    float lifetime;
    uint seed;
    float3 position;
    float3 direction;
    float3 velocity;
    uint particleId;
    float3 targetPosition;
    bool alive;
    float age;
};

struct VFXSourceAttributes
{
};






















#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)


RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;


#if VFX_USE_SPAWNER_FROM_GPU
    StructuredBuffer<uint> eventList;
    #define instancingPrefixSumOffset (2 * asuint(instancingConstants.z))
#else
    StructuredBuffer<uint> spawnBuffer;
    #define EVENT_PREFIX_SUM(index)         spawnBuffer[index]
    #define SPAWNCOUNT_PREFIX_SUM_OFFSET    instancingActiveCount
    #define instancingPrefixSumOffset 0
#endif


CBUFFER_START(initParamsConst)
    uint dispatchWidth;
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXGPUEvent.hlsl"


void SetAttribute_F01429A3(inout float lifetime, inout uint seed, float A, float B) /*channels:XYZ */
{
    lifetime = lerp(A,B,RAND);
}
void PositionShape_6FB08EAA(inout float3 position, inout uint seed, inout float3 direction, float rNorm, float sinTheta, float cosTheta, float4x4 transform, float4x4 inverseTranspose) /*shape:Circle heightMode:Volume positionMode:Surface spawnMode:Random */
{
    
    float3 currentAxisY = float3(sinTheta, cosTheta, 0.0f);
    float3 finalPos = float3(sinTheta, cosTheta, 0.0f) * rNorm;
    finalPos = mul(transform, float4(finalPos, 1.0f)).xyz;
    currentAxisY = mul(inverseTranspose, float4(currentAxisY, 0.0f)).xyz;
    currentAxisY = normalize(currentAxisY);
    float3 currentAxisZ = mul(inverseTranspose, float4(0.0f, 0.0f, 1.0f, 0.0f)).xyz;
    currentAxisZ = normalize(currentAxisZ);
    float3 currentAxisX = cross(currentAxisY, currentAxisZ);
    position = finalPos;
    
    direction = currentAxisY;
    
    
}
void VelocityDirection_1(inout float3 velocity, inout float3 direction, inout uint seed, float3 Direction, float MinSpeed, float MaxSpeed, float DirectionBlend) /*speedMode:Random */
{
    float speed = lerp(MinSpeed,MaxSpeed,RAND);
    direction = VFXSafeNormalize(lerp(direction, Direction, DirectionBlend));
    velocity = direction * speed;
}


#if HAS_STRIPS
bool GetParticleIndex(inout uint particleIndex, uint stripIndex, uint instanceIndex)
{
    uint relativeIndex;
    uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripIndex);

    InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), 1, relativeIndex);
    bool isFull = relativeIndex >= PARTICLE_PER_STRIP_COUNT;
    if (isFull)
    {
        InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), -1); // Remove previous increment
    }
    else
    {
        particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, bufferIndex) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
    }

    return !isFull;
}
#endif

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint index = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if VFX_USE_SPAWNER_FROM_GPU
    uint indexOffset = 0;
    [branch]
    if(instancingCurrentOffset > 0)
        indexOffset = instancingPrefixSum[instancingCurrentOffset - 1];

    index += indexOffset;
#else
    index += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif
    uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
    index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 352);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	
	uint systemSeed = contextData.systemSeed;

    GraphValues graphValues;
    
    graphValues.transform_a._m00_m10_m20_m30 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 16));
    graphValues.transform_a._m01_m11_m21_m31 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 32));
    graphValues.transform_a._m02_m12_m22_m32 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 48));
    graphValues.transform_a._m03_m13_m23_m33 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 64));
    graphValues.inverseTranspose_a._m00_m10_m20_m30 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 80));
    graphValues.inverseTranspose_a._m01_m11_m21_m31 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 96));
    graphValues.inverseTranspose_a._m02_m12_m22_m32 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 112));
    graphValues.inverseTranspose_a._m03_m13_m23_m33 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 352  + 128));
    graphValues.Direction_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 352  + 160));
    graphValues._vfx_enabled_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 172);
    graphValues.A_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 188));
    graphValues.B_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 204));
    graphValues._vfx_enabled_b = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 220);
    graphValues.rNorm_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 236));
    graphValues.uniform_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 252));
    graphValues._vfx_enabled_c = (bool)graphValuesBuffer.Load(instanceActiveIndex * 352  + 268);
    graphValues.MinSpeed_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 272));
    graphValues.MaxSpeed_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 276));
    graphValues.DirectionBlend_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 352  + 280));
    

#if VFX_USE_SPAWNER_FROM_GPU
    if (instanceCurrentIndex == instancingCurrentOffset)
    {
        index -= indexOffset;
    }
    uint elementCount = eventList[VFXGetEventListBufferPrefixSumIndex(instanceActiveIndex)];
    if (instanceActiveIndex > 0u)
    {
        elementCount -= eventList[VFXGetEventListBufferPrefixSumIndex(instanceActiveIndex - 1)];;
    }
    uint totalElementCount = eventList[VFXGetEventListBufferTotalCountIndex(instanceIndex)];
    uint maxThreadId = min(contextData.maxParticleCount, elementCount);
    uint currentSpawnIndex = totalElementCount - elementCount;
#else
    uint nbEvents = EVENT_PREFIX_SUM(instanceActiveIndex);
    [branch]
    if (instanceActiveIndex > 0u)
    {
        nbEvents -= EVENT_PREFIX_SUM(instanceActiveIndex - 1);
    }

    uint maxThreadId = instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex];
    [branch]
    if (instanceCurrentIndex > instancingCurrentOffset)
    {
        maxThreadId -= instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex - 1];
    }
    uint currentSpawnIndex = contextData.initSpawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadList[DEAD_LIST_COUNT_COPY_OFFSET + instanceIndex]);
#endif

    if (index < maxThreadId)
    {
        uint startEventIndex = 0u;
        int sourceIndex = 0;

#if VFX_USE_SPAWNER_FROM_GPU
        sourceIndex = eventList[VFXGetEventListBufferSourceIndex(instanceIndex, RAW_CAPACITY, index)];
#else
        [branch]
        if (instanceActiveIndex > 0u)
        {
            startEventIndex = EVENT_PREFIX_SUM(instanceActiveIndex - 1);
        }
        uint sourceSearchBegin = startEventIndex + SPAWNCOUNT_PREFIX_SUM_OFFSET;
        uint sourceSearchEnd = sourceSearchBegin + nbEvents;
        sourceIndex = BinarySearchPrefixSum(index, spawnBuffer, sourceSearchBegin, sourceSearchEnd) - sourceSearchBegin;

#endif

        VFXAttributes attributes = (VFXAttributes)0;
        VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

        attributes.lifetime = (float)1;
        attributes.seed = (uint)0;
        attributes.position = float3(0, 0, 0);
        attributes.direction = float3(0, 0, 1);
        attributes.velocity = float3(0, 0, 0);
        attributes.particleId = (uint)0;
        attributes.targetPosition = float3(0, 0, 0);
        attributes.alive = (bool)true;
        attributes.age = (float)0;
        

        uint particleIndex = index + currentSpawnIndex;
#if VFX_USE_PARTICLEID_CURRENT
         attributes.particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        attributes.seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_SPAWNINDEX_CURRENT
        attributes.spawnIndex = index;
#endif

#if VFX_USE_SPAWNER_FROM_GPU && VFX_USE_SPAWNCOUNT_SOURCE
    //Fix previously incorrectly read or initialized source spawnCount
    sourceAttributes.spawnCount = (float)elementCount;
#endif

#if HAS_STRIPS
#if !VFX_USE_SPAWNER_FROM_GPU
		
		
#else
        uint stripIndex = sourceIndex;
#endif

        if (stripIndex >= STRIP_COUNT)
            return;

        if (!GetParticleIndex(particleIndex, stripIndex, instanceIndex))
            return;

        const StripData stripData = GetStripDataFromStripIndex(stripIndex, instanceIndex);
		InitStripAttributesWithSpawn(maxThreadId, particleIndex, attributes, stripData);
		// TODO Change seed to be sure we're deterministic on random with strip
#endif

        if (graphValues._vfx_enabled_a)
        {
            SetAttribute_F01429A3( /*inout */attributes.lifetime,  /*inout */attributes.seed, graphValues.A_a, graphValues.B_a);
        }
        if (graphValues._vfx_enabled_b)
        {
            float tmp_bm = Rand(attributes.seed);
            float tmp_bn = graphValues.uniform_a * tmp_bm;
            float tmp_bo = sin(tmp_bn);
            float tmp_bp = cos(tmp_bn);
            PositionShape_6FB08EAA( /*inout */attributes.position,  /*inout */attributes.seed,  /*inout */attributes.direction, graphValues.rNorm_a, tmp_bo, tmp_bp, graphValues.transform_a, graphValues.inverseTranspose_a);
        }
        if (graphValues._vfx_enabled_c)
        {
            VelocityDirection_1( /*inout */attributes.velocity,  /*inout */attributes.direction,  /*inout */attributes.seed, graphValues.Direction_a, graphValues.MinSpeed_a, graphValues.MaxSpeed_a, graphValues.DirectionBlend_a);
        }
        

#if VFX_USE_ALIVE_CURRENT
        if (attributes.alive)
#endif
        {
#if USE_DEAD_LIST
            uint deadIndex;
            InterlockedAdd(deadList[instanceIndex], -1, deadIndex);
            deadIndex -= 1;
            deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
            uint index = deadList[deadIndex];
#else
            uint index = particleIndex;
#endif
            attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x1 + 0x0)) << 2,asuint(attributes.lifetime));
            attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x4 + 0x140)) << 2,asuint(attributes.position));
            attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0x780)) << 2,asuint(attributes.velocity));
            attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x1 + 0xF00)) << 2,asuint(attributes.particleId));
            attributeBuffer.Store3(((instanceIndex * 0x1040) + (index * 0x3 + 0xB40)) << 2,asuint(attributes.targetPosition));
            attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x4 + 0x143)) << 2,uint(attributes.alive));
            attributeBuffer.Store(((instanceIndex * 0x1040) + (index * 0x1 + 0x640)) << 2,asuint(attributes.age));
            
        }
    }
}
